function HTMLGroupBox(sys, formID, code, posX, posY, width, height, description, value) {
  this.create(sys, formID, code, posX, posY, width, height, description, value);
  this.style = 0;
  this.nodesc = false;
}

HTMLGroupBox.inherits(HTMLContainer);
HTMLGroupBox.prototype.name = "HTMLGroupBox";

HTMLGroupBox.prototype.setStyle = function(style) {
  this.style = style;
  this.designComponent(this.doc);
};

HTMLContainer.prototype.setNoDescription = function(v) {
  this.nodesc = v;
};

HTMLGroupBox.prototype.setX = function(posX) {
  this.callMethod(HTMLElementBase, "setX", [posX]);
  this.updateLayout();
};

HTMLGroupBox.prototype.setY = function(posY) {
  this.callMethod(HTMLElementBase, "setY", [posY]);
  this.updateLayout();
};

HTMLGroupBox.prototype.setWidth = function(width) {
  this.callMethod(HTMLElementBase, "setWidth", [width]);
  this.updateLayout();
};

HTMLGroupBox.prototype.setHeight = function(height) {
  this.callMethod(HTMLElementBase, "setHeight", [height]);
  this.updateLayout();
};

HTMLGroupBox.prototype.setVisible = function(visible) {
  this.callMethod(HTMLElementBase, "setVisible", [visible]);
  this.updateLayout();
};

HTMLGroupBox.prototype.designGroupBox = function(doc) {
  // Definir borda da group box.
  if (this.style == 0) this.div.className += " border"; // Caixa // Bootstrap
  else if (this.style == 1) this.div.className += " card"; // Moldura // Bootstrap
  else if (this.style == 2) this.div.className += " border-top border-bottom-0 border-start-0 border-end-0"; // Linha Acima // Bootstrap
  else if (this.style == 3) this.div.className += " border-top-0 border-bottom border-start-0 border-end-0"; // Linha Abaixo // Bootstrap
  else if (this.style == 4) this.div.className += " border-top-0 border-bottom-0 border-start border-end-0"; // Linha a Esquerda // Bootstrap
  else if (this.style == 5) this.div.className += " border-top-0 border-bottom-0 border-start-0 border-end"; // Linha a Direita // Bootstrap
  else if (this.style == 6) this.div.className += " border-0"; // Sem Borda // Bootstrap

  if (this.style == 0 || this.style == 1 || this.style == 2 ||
      this.style == 3 || this.style == 4 || this.style == 5) {

    // Definir estilo group box.
    if (this.styleMold == 0) this.div.className += " border-inset"; // Custom
    else if (this.styleMold == 1) this.div.className += " border-outset"; // Custom

    if (this.description && this.description.trim().length > 0 && this.name !== "HTMLDetailPanel") {
      this.header = document.createElement("div");

      this.header.style.flex = "0 0 auto"; // Correção para o Safari e IE
      if (this.classic) {
        this.header.className = "position-absolute p-1 header-radio-group"; // Bootstrap
        this.header.style.marginTop = "-0.6rem";
        this.header.style.marginLeft = "0.5rem";
        this.header.style.zIndex = this.zindex;
        doc.appendChild(this.header);

        var object = this;
        window.addEventListener("resize", function() {
          if (object) object.updateLayout();
        });
      } else {
        this.header.className = "card-header px-3 py-2"; // Bootstrap
        this.div.appendChild(this.header);
      }

      this.label = document.createElement("label");
      this.label.className = "d-block mb-0"; // Bootstrap
      this.label.id = "WFRSpanComponent" + this.code;
      this.label.innerHTML = this.description;
      this.header.appendChild(this.label);
    }
  }
};

HTMLGroupBox.prototype.updateLayout = function() {
  if (this.header && this.classic) {
    this.header.style.backgroundColor = this.bgColor ? this.bgColor : window.getComputedStyle(document.body).backgroundColor;
    this.header.style.top = this.div.offsetTop + "px";
    this.header.style.left = this.div.offsetLeft + "px";
    this.header.style.lineHeight = "0.7";

    if (this.visible) this.header.style.display = null;
    else this.header.style.display = "none";
  }
};

HTMLGroupBox.prototype.designComponent = function(doc) {
  this.callMethod(HTMLContainer, "designComponent", [doc]);
  this.designGroupBox(doc);
};

HTMLGroupBox.prototype.afterInit = function() {
  this.callMethod(HTMLContainer, "afterInit", []);
  if (this.codigoForm !== null && this.codigoForm !== undefined && this.codigoForm !== 0) {
    this.openFilteredFormInFrame(this.codigoForm, this.params, true, false);
  }

  // O componente deve por padrão ter transparência quando não for setado a cor.
  if (!this.bgColor && !this.div.style.backgroundColor) this.div.style.backgroundColor = "transparent";

  if(this.classic){
    if (this.tab) {
      var object = this;
      this.tab.addShownListener(function() {
        if (object) object.updateLayout();
      });
    }
  }

  this.updateLayout();
};

HTMLGroupBox.prototype.flush = function() {
  if (this.label && this.label.flush)
    this.label.flush();
  this.label = null;
  this.description = null;
  this.hidden = null;
  this.iframe = null;
  this.callMethod(HTMLElementBase, "flush", []);
};

/**
 * Limpa a moldura.
 */
HTMLGroupBox.prototype.clearContent = function() {
  this.changeContent("");
};

/**
 * Altera o conteúdo da moldura.
 * @param html Conteúdo HTML a ser definido na moldura.
 */
HTMLGroupBox.prototype.changeContent = function(html) {
  if (this.iframe) this.closeFrame();
  if (this.div) this.div.innerHTML = html;
};

/**
 * Abrir formulário na moldura.
 * @param formId ID do formulário.
 * @param formFilter (Opcional) Filtro do formulário.
 * @param scrollbars (Opcional) Exibir barras de rolagem.
 * @param border (Opcional) Exibir borda.
 * @returns Elemento do iframe.
 */
HTMLGroupBox.prototype.openFilteredFormInFrame = function(formId, formFilter, scrollbars, border) {
  return this.openUrlInFrame({
    url: getAbsolutContextPath() + "form.jsp?sys=" + sysCode + "&action=openform&formID=" +
      URLEncode(formId) + "&goto=-1&filter=" + (formFilter ? formFilter : "") +
      "&scrolling=" + (scrollbars ? "yes" : "no"),
    isForm: true,
  }, scrollbars, border);
};

/**
 * Abre uma URL na moldura.
 * @param url URL a ser aberta na moldura.
 * @param scrollbars (Opcional) Exibir barras de rolagem.
 * @param border (Opcional) Exibir borda.
 * @returns Elemento do iframe.
 */
HTMLGroupBox.prototype.openUrlInFrame = function(url, scrollbars, border) {
  const targetUrl = (typeof url === "object" ? url.url : url);
  const isTargetUrlForm = (typeof url === "object" ? url.isForm : false);

  if (!this.iframe) {
    // Criar iframe.
    const id = "URLFrame" + Math.round(Math.random() * 9999999);
    this.iframe = document.createElement("iframe");
    this.iframe.className = "w-100 h-100 m-0 p-0"; // Bootstrap
    this.iframe.id = id;
    this.iframe.name = id;
    this.iframe.src = targetUrl;
    this.iframe.componentType = this.name;
    this.iframe.componentName = this.id;
    this.iframe.componentForm = this.formID;
    this.div.appendChild(this.iframe);

    // Associar eventos ao iframe.
    this.iframe.addEventListener("load", () => {
      if (this.iframe.getAttribute("webrun-src-type") === "url") {
        this.handleURLOpen(this.iframe.src);
      }
    });
  }

  if (this.iframe) {
    if (this.iframe.src !== targetUrl) {
      if (this.iframe.formOnUnLoadAction) {
        this.iframe.formOnUnLoadAction();
      }

      this.iframe.src = targetUrl;
    }

    this.iframe.setAttribute("webrun-src-type", isTargetUrlForm ? "form" : "url");
    this.iframe.scrolling = (scrollbars ? "yes" : "no");

    if (border && this.iframe.classList.contains("border-0")) this.iframe.classList.remove("border-0");
    if (border && !this.iframe.classList.contains("border")) this.iframe.classList.add("border");

    if (!border && this.iframe.classList.contains("border")) this.iframe.classList.remove("border");
    if (!border && !this.iframe.classList.contains("border-0")) this.iframe.classList.add("border-0");

    if (scrollbars && this.iframe.classList.contains("overflow-hidden")) this.iframe.classList.remove("overflow-hidden");
    if (!scrollbars && !this.iframe.classList.contains("overflow-hidden")) this.iframe.classList.add("overflow-hidden");
  }

  return this.iframe;
};

/**
 * Fecha o formulário ou a URL que está aberta na moldura.
 */
HTMLGroupBox.prototype.closeFrame = function() {
  if (this.iframe) {
    // Verificar se é uma URL que está aberta.
    if (this.iframe.getAttribute("webrun-src-type") === "url") {
      // Lidar com o fechamento da URL.
      this.handleURLClose(this.iframe.src);

    // Verificar se possui o método interno de fechamento de formulário.
    } else if (this.iframe.formOnUnLoadAction) {
      // Lidar com o fechamento do formulário.
      this.iframe.formOnUnLoadAction();
    }

    // Remover iframe.
    this.div.removeChild(this.iframe);
    this.iframe = null;
  }
};

/**
 * Função chamada quando um formulário é aberto na moldura.
 * @param formId ID do formulário aberto.
 * @param formDescription Descrição do formulário aberto.
 */
HTMLGroupBox.prototype.handleFormOpen = function(formId, formDescription) {
  if (this.onOpenForm) this.onOpenForm(formId, formDescription);
};

/**
 * Função chamada quando o formulário que está aberto é fechado.
 * @param formId ID do formulário fechado.
 * @param formDescription Descrição do formulário fechado.
 */
HTMLGroupBox.prototype.handleFormClose = function(formId, formDescription) {
  if (this.onCloseForm) this.onCloseForm(formId, formDescription);
};

/**
 * Função chamada quando uma URL é aberta na moldura.
 * @param url URL que foi aberta.
 */
HTMLGroupBox.prototype.handleURLOpen = function(url) {

};

/**
 * Função chamada quando a URL que está aberta na moldura é fechada.
 * @param url URL que foi fechada.
 */
HTMLGroupBox.prototype.handleURLClose = function(url) {

};
